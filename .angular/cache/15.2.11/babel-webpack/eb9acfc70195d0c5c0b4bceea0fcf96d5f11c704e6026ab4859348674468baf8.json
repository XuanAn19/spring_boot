{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./login.service\";\nexport class NormalUserService {\n  constructor(http, loginService) {\n    this.http = http;\n    this.loginService = loginService;\n    this.baseUrl = 'http://localhost:8181'; //Spring boot url\n  }\n\n  registerUser(user) {\n    return this.http.post(`${this.baseUrl}/user/`, user);\n  }\n  sendOTP(email, otp) {\n    const body = {\n      email,\n      otp\n    };\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    return this.http.post(`${this.baseUrl}/user/verify-otp`, body, {\n      responseType: 'text',\n      headers,\n      observe: 'response'\n    }).pipe(map(response => response.body)); // Assuming the response body contains the OTP verification status\n  }\n\n  postQueries(query) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.post(`${this.baseUrl}/user/query`, query, {\n      headers\n    });\n  }\n  getUser(userId) {\n    const url = `${this.baseUrl}/user/getUser/${userId}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(url, {\n      headers\n    });\n  }\n  updateUser(email, user) {\n    const url = `${this.baseUrl}/user/updateUser/${email}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.put(url, user, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function NormalUserService_Factory(t) {\n    return new (t || NormalUserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoginService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NormalUserService,\n    factory: NormalUserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,GAAG,QAAQ,MAAM;;;;AAMtC,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,IAAgB,EAAUC,YAA0B;IAApD,SAAI,GAAJD,IAAI;IAAsB,iBAAY,GAAZC,YAAY;IAFlD,YAAO,GAAG,uBAAuB,CAAC,CAAC;EAEiC;;EAG5EC,YAAY,CAACC,IAAS;IACpB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,QAAQ,EAAEF,IAAI,CAAC;EACtD;EAGAG,OAAO,CAACC,KAAa,EAAEC,GAAW;IAChC,MAAMC,IAAI,GAAG;MAAEF,KAAK;MAAEC;IAAG,CAAE;IAC3B,MAAME,OAAO,GAAG;MAAE,cAAc,EAAE;IAAkB,CAAE;IACtD,OAAO,IAAI,CAACV,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,kBAAkB,EAAEI,IAAI,EAAE;MAAEE,YAAY,EAAE,MAAM;MAAED,OAAO;MAAEE,OAAO,EAAE;IAAU,CAAE,CAAC,CACnHC,IAAI,CAAChB,GAAG,CAACiB,QAAQ,IAAIA,QAAQ,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC;EAC3C;;EAEAM,WAAW,CAACC,KAAU;IACpB,MAAMN,OAAO,GAAG,IAAId,WAAW,EAAE,CAACqB,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAChB,YAAY,CAACiB,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAAClB,IAAI,CAACI,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,aAAa,EAAEW,KAAK,EAAE;MAACN;IAAO,CAAC,CAAC;EACvE;EAEAS,OAAO,CAACC,MAAU;IAChB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAAChB,OAAO,iBAAiBe,MAAM,EAAE;IACpD,MAAMV,OAAO,GAAG,IAAId,WAAW,EAAE,CAACqB,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAChB,YAAY,CAACiB,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAAClB,IAAI,CAACsB,GAAG,CAAMD,GAAG,EAAE;MAACX;IAAO,CAAC,CAAC;EAC3C;EAEAa,UAAU,CAAChB,KAAa,EAAEJ,IAAS;IACjC,MAAMkB,GAAG,GAAG,GAAG,IAAI,CAAChB,OAAO,oBAAoBE,KAAK,EAAE;IACtD,MAAMG,OAAO,GAAG,IAAId,WAAW,EAAE,CAACqB,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAAChB,YAAY,CAACiB,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAAClB,IAAI,CAACwB,GAAG,CAACH,GAAG,EAAElB,IAAI,EAAE;MAACO;IAAO,CAAC,CAAC;EAC5C;EAAC;qBAlCUZ,iBAAiB;EAAA;EAAA;WAAjBA,iBAAiB;IAAA2B,SAAjB3B,iBAAiB;IAAA4B,YAFhB;EAAM","names":["HttpHeaders","map","NormalUserService","constructor","http","loginService","registerUser","user","post","baseUrl","sendOTP","email","otp","body","headers","responseType","observe","pipe","response","postQueries","query","set","getToken","getUser","userId","url","get","updateUser","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\voket\\Desktop\\Moduel2\\HealthCareSystem\\Frontend1\\Frontend\\src\\app\\service\\normal-user.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, map } from 'rxjs';\r\nimport { LoginService } from './login.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NormalUserService {\r\n\r\n  private baseUrl = 'http://localhost:8181'; //Spring boot url\r\n\r\n  constructor(private http: HttpClient, private loginService: LoginService) { }\r\n\r\n  \r\n  registerUser(user: any): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/user/`, user);\r\n  }\r\n\r\n \r\n  sendOTP(email: string, otp: string): Observable<any> {\r\n    const body = { email, otp };\r\n    const headers = { 'Content-Type': 'application/json' };\r\n    return this.http.post(`${this.baseUrl}/user/verify-otp`, body, { responseType: 'text', headers, observe: 'response' })\r\n      .pipe(map(response => response.body)); // Assuming the response body contains the OTP verification status\r\n  }\r\n\r\n  postQueries(query: any): Observable<any> {\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.post(`${this.baseUrl}/user/query`, query, {headers});\r\n  }\r\n\r\n  getUser(userId:any): Observable<any> {\r\n    const url = `${this.baseUrl}/user/getUser/${userId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, {headers});\r\n  }\r\n\r\n  updateUser(email: string, user: any): Observable<any> {\r\n    const url = `${this.baseUrl}/user/updateUser/${email}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.put(url, user, {headers});\r\n  }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}