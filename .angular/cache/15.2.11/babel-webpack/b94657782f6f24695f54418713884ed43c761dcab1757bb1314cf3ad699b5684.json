{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./service/login.service\";\nexport class TreatmentService {\n  constructor(http, loginService) {\n    this.http = http;\n    this.loginService = loginService;\n    this.apiUrl = 'http://localhost:8181/treatment'; // URL của backend\n  }\n  // Thêm điều trị\n  addTreatment(treatment) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.post(`${this.apiUrl}/add`, treatment, {\n      headers\n    });\n  }\n  // Lấy danh sách điều trị theo ID bệnh nhân\n  getTreatmentsByUserId(userId) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(`${this.apiUrl}/getByUserId/${userId}`, {\n      headers\n    });\n  }\n  updateTreatment(treatmentId, treatment) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.put(`${this.apiUrl}/update/${treatmentId}`, treatment, {\n      headers\n    });\n  }\n  deleteTreatment(treatmentId) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.delete(`${this.apiUrl}/delete/${treatmentId}`, {\n      headers\n    });\n  }\n  getUserIdByEmail(email) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(`${this.apiUrl}/getUserIdByEmail?email=${email}`, {\n      headers\n    });\n  }\n  // Lấy thông tin điều trị theo ID cuộc hẹn\n  getTreatmentByAppointmentId(appointmentId) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(`${this.apiUrl}/getByAppointmentId/${appointmentId}`, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function TreatmentService_Factory(t) {\n    return new (t || TreatmentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoginService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TreatmentService,\n    factory: TreatmentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAU9D,OAAM,MAAOC,gBAAgB;EAG3BC,YAAoBC,IAAgB,EAAUC,YAA2B;IAArD,SAAI,GAAJD,IAAI;IAAsB,iBAAY,GAAZC,YAAY;IAFnD,WAAM,GAAG,iCAAiC,CAAC,CAAC;EAEyB;EAE5E;EACAC,YAAY,CAACC,SAAoB;IAC/B,MAAMC,OAAO,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAY,GAAG,IAAI,CAACC,MAAM,MAAM,EAAEL,SAAS,EAAE;MAACC;IAAO,CAAC,CAAC;EAC9E;EAGA;EACAK,qBAAqB,CAACC,MAAc;IAClC,MAAMN,OAAO,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAACN,IAAI,CAACW,GAAG,CAAc,GAAG,IAAI,CAACH,MAAM,gBAAgBE,MAAM,EAAE,EAAE;MAACN;IAAO,CAAC,CAAC;EACtF;EAEAQ,eAAe,CAACC,WAAmB,EAAEV,SAAoB;IACvD,MAAMC,OAAO,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAACN,IAAI,CAACc,GAAG,CAAY,GAAG,IAAI,CAACN,MAAM,WAAWK,WAAW,EAAE,EAAEV,SAAS,EAAE;MAACC;IAAO,CAAC,CAAC;EAC/F;EAEAW,eAAe,CAACF,WAAmB;IACjC,MAAMT,OAAO,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAACN,IAAI,CAACgB,MAAM,CAAO,GAAG,IAAI,CAACR,MAAM,WAAWK,WAAW,EAAE,EAAE;MAACT;IAAO,CAAC,CAAC;EAClF;EAGAa,gBAAgB,CAACC,KAAa;IAC5B,MAAMd,OAAO,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAACN,IAAI,CAACW,GAAG,CAAS,GAAG,IAAI,CAACH,MAAM,2BAA2BU,KAAK,EAAE,EAAE;MAACd;IAAO,CAAC,CAAC;EAC3F;EAEA;EACAe,2BAA2B,CAACC,aAAqB;IAC/C,MAAMhB,OAAO,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAACN,IAAI,CAACW,GAAG,CAAY,GAAG,IAAI,CAACH,MAAM,uBAAuBY,aAAa,EAAE,EAAE;MAAChB;IAAO,CAAC,CAAC;EAClG;EAAC;qBAtCUN,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAuB,SAAhBvB,gBAAgB;IAAAwB,YAHf;EAAM","names":["HttpHeaders","TreatmentService","constructor","http","loginService","addTreatment","treatment","headers","set","getToken","post","apiUrl","getTreatmentsByUserId","userId","get","updateTreatment","treatmentId","put","deleteTreatment","delete","getUserIdByEmail","email","getTreatmentByAppointmentId","appointmentId","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\voket\\Desktop\\Moduel2\\HealthCareSystem\\Frontend1\\Frontend\\src\\app\\treatment.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { LoginService } from './service/login.service';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { Treatment } from './components/models/treatment.model';\n\n@Injectable({\n  providedIn: 'root'\n\n})\nexport class TreatmentService {\n private apiUrl = 'http://localhost:8181/treatment'; // URL của backend\n\n  constructor(private http: HttpClient, private loginService : LoginService) {}\n\n  // Thêm điều trị\n  addTreatment(treatment: Treatment): Observable<Treatment> {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.post<Treatment>(`${this.apiUrl}/add`, treatment, {headers});\n  }\n\n\n  // Lấy danh sách điều trị theo ID bệnh nhân\n  getTreatmentsByUserId(userId: number): Observable<Treatment[]> {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get<Treatment[]>(`${this.apiUrl}/getByUserId/${userId}`, {headers});\n  }\n\n  updateTreatment(treatmentId: number, treatment: Treatment): Observable<Treatment> {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.put<Treatment>(`${this.apiUrl}/update/${treatmentId}`, treatment, {headers});\n  }\n\n  deleteTreatment(treatmentId: number): Observable<void> {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.delete<void>(`${this.apiUrl}/delete/${treatmentId}`, {headers});\n  }\n\n\n  getUserIdByEmail(email: string) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get<number>(`${this.apiUrl}/getUserIdByEmail?email=${email}`, {headers});\n  }\n\n  // Lấy thông tin điều trị theo ID cuộc hẹn\n  getTreatmentByAppointmentId(appointmentId: number): Observable<Treatment> {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get<Treatment>(`${this.apiUrl}/getByAppointmentId/${appointmentId}`, {headers});\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}