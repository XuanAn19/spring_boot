{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./login.service\";\nexport class AdminService {\n  constructor(http, loginService) {\n    this.http = http;\n    this.loginService = loginService;\n    this.baseUrl = 'http://localhost:8181/'; // Spring Boot URL\n  }\n\n  getAdmin(userId) {\n    const url = `${this.baseUrl}admin/getAdmin/${userId}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(url, {\n      headers\n    });\n  }\n  addSpecialization(spec) {\n    const url = `${this.baseUrl}admin/addSpec`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.post(url, spec, {\n      headers\n    });\n  }\n  getAllSpecializations() {\n    const url = `${this.baseUrl}admin/getAllSpec`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(url, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoginService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n}\ndoctorDto => {\n  const url = `${this.baseUrl}admin/saveDoctor`;\n  const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n  return this.http.post(url, doctorDto, {\n    headers\n  });\n};\n// Update Admin\nupdateAdmin(adminId, any, adminDto, any);\nObservable < any > {\n  const: url = `${this.baseUrl}admin/updateAdmin/${adminId}`,\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.put(url, adminDto, {\n    headers\n  })\n};\n// Delete Admin\ndeleteAdmin(adminId, any);\nObservable < any > {\n  const: url = `${this.baseUrl}admin/deleteAdmin/${adminId}`,\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.delete(url, {\n    headers\n  })\n};\ngetAllDoctors();\nObservable < any > {\n  const: url = `${this.baseUrl}admin/getAllDoctors`,\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.get(url, {\n    headers\n  })\n};\n// Get doctor by ID\ngetDoctorById(doctorId, number);\nObservable < any > {\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.get(`${this.baseUrl}admin/doctors/${doctorId}`, {\n    headers\n  })\n};\n// Update Doctor\nupdateDoctor(doctorId, any, doctorDto, any);\nObservable < any > {\n  const: url = `${this.baseUrl}admin/updateDoctor/${doctorId}`,\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.put(url, doctorDto, {\n    headers\n  })\n};\n// Delete Doctor\ndeleteDoctor(doctorId, any);\nObservable < any > {\n  const: url = `${this.baseUrl}admin/deleteDoctor/${doctorId}`,\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.delete(url, {\n    headers\n  })\n};\n// Create Normal User\ncreateNormalUser(normalUserDto, any);\nObservable < any > {\n  const: url = `${this.baseUrl}admin/create`,\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.post(url, normalUserDto, {\n    headers\n  })\n};\n// Xóa người dùng\ndeleteNormalUser(userId, number);\nObservable < any > {\n  const: url = `${this.baseUrl}admin/user/delete/${userId}`,\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.delete(url, {\n    headers\n  })\n};\n// Get all users\ngetAllUsers();\nObservable < any > {\n  const: url = `${this.baseUrl}admin/users`,\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.get(url, {\n    headers\n  })\n};\ngetUserByEmail(email, string);\nObservable < any > {\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.get(`${this.baseUrl}/user/update/${email}`, {\n    headers\n  })\n};\n// Cập nhật thông tin người dùng\nupdateUser(email, string, user, any);\nObservable < any > {\n  const: headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken()),\n  return: this.http.put(`${this.baseUrl}/user/update/${email}`, user, {\n    headers\n  })\n};","map":{"version":3,"mappings":"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","names":["HttpHeaders","Observable","AdminService","constructor","http","loginService","getAdmin","userId","url","baseUrl","headers","set","getToken","get","addSpecialization","spec","post","getAllSpecializations","factory","providedIn","doctorDto","updateAdmin","adminId","any","adminDto","const","return","put","deleteAdmin","delete","getAllDoctors","getDoctorById","doctorId","number","updateDoctor","deleteDoctor","createNormalUser","normalUserDto","deleteNormalUser","getAllUsers","getUserByEmail","email","string","updateUser","user"],"sourceRoot":"","sources":["C:\\Users\\voket\\Desktop\\Moduel2\\HealthCareSystem\\Frontend1\\Frontend\\src\\app\\service\\admin.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LoginService } from './login.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n\r\n  private baseUrl = 'http://localhost:8181/'; // Spring Boot URL\r\n\r\n\r\n  constructor(private http: HttpClient, private loginService : LoginService) { }\r\n\r\n  getAdmin(userId:any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/getAdmin/${userId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, {headers});\r\n  }\r\n\r\n  addSpecialization(spec: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/addSpec`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.post<any>(url, spec, {headers});\r\n  }\r\n\r\n  getAllSpecializations(): Observable<any> {\r\n    const url = `${this.baseUrl}admin/getAllSpec`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, {headers});\r\n  }\r\n  deleteSpecialization(): \r\n\r\n  saveDoctor(doctorDto: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/saveDoctor`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.post<any>(url, doctorDto, {headers});\r\n  }\r\n\r\n   // Update Admin\r\n   updateAdmin(adminId: any, adminDto: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/updateAdmin/${adminId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.put<any>(url, adminDto, { headers });\r\n  }\r\n\r\n  // Delete Admin\r\n  deleteAdmin(adminId: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/deleteAdmin/${adminId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.delete<any>(url, { headers });\r\n  }\r\n\r\n  getAllDoctors(): Observable<any> {\r\n    const url = `${this.baseUrl}admin/getAllDoctors`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, { headers });\r\n  }\r\n\r\n // Get doctor by ID\r\n getDoctorById(doctorId: number): Observable<any> {\r\n  const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n  return this.http.get<any>(`${this.baseUrl}admin/doctors/${doctorId}`, { headers });\r\n}\r\n  // Update Doctor\r\n  updateDoctor(doctorId: any, doctorDto: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/updateDoctor/${doctorId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.put<any>(url, doctorDto, { headers });\r\n  }\r\n\r\n  // Delete Doctor\r\n  deleteDoctor(doctorId: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/deleteDoctor/${doctorId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.delete<any>(url, { headers });\r\n  }\r\n\r\n  // Create Normal User\r\n  createNormalUser(normalUserDto: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/create`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.post<any>(url, normalUserDto, { headers });\r\n  }\r\n\r\n // Xóa người dùng\r\n deleteNormalUser(userId: number): Observable<any> {\r\n  const url = `${this.baseUrl}admin/user/delete/${userId}`; // Cập nhật URL API\r\n  const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n  return this.http.delete<any>(url, { headers });\r\n}\r\n// Get all users\r\ngetAllUsers(): Observable<any> {\r\n  const url = `${this.baseUrl}admin/users`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, { headers });\r\n}\r\n\r\n  getUserByEmail(email: string): Observable<any> {\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(`${this.baseUrl}/user/update/${email}`, { headers });\r\n  }\r\n\r\n  // Cập nhật thông tin người dùng\r\n  updateUser(email: string, user: any): Observable<any> {\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.put<any>(`${this.baseUrl}/user/update/${email}`, user, { headers });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}