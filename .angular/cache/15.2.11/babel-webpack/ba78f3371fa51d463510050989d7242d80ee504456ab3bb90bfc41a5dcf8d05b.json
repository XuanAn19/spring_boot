{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./login.service\";\nexport class AdminService {\n  constructor(http, loginService) {\n    this.http = http;\n    this.loginService = loginService;\n    this.baseUrl = 'https://healthcare-backend-jsrk.onrender.com/admin'; // Spring Boot URL\n  }\n\n  getAdmin(userId) {\n    const url = `${this.baseUrl}/getAdmin/${userId}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(url, {\n      headers\n    });\n  }\n  addSpecialization(spec) {\n    const url = `${this.baseUrl}/addSpec`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.post(url, spec, {\n      headers\n    });\n  }\n  getAllSpecializations() {\n    const url = `${this.baseUrl}/getAllSpec`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(url, {\n      headers\n    });\n  }\n  saveDoctor(doctorDto) {\n    const url = `${this.baseUrl}/saveDoctor`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.post(url, doctorDto, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoginService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAQ9D,OAAM,MAAOC,YAAY;EAKvBC,YAAoBC,IAAgB,EAAUC,YAA2B;IAArD,SAAI,GAAJD,IAAI;IAAsB,iBAAY,GAAZC,YAAY;IAHlD,YAAO,GAAG,oDAAoD,CAAC,CAAC;EAGK;;EAE7EC,QAAQ,CAACC,MAAU;IACjB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,aAAaF,MAAM,EAAE;IAChD,MAAMG,OAAO,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACN,YAAY,CAACO,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAML,GAAG,EAAE;MAACE;IAAO,CAAC,CAAC;EAC3C;EAEAI,iBAAiB,CAACC,IAAS;IACzB,MAAMP,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,UAAU;IACrC,MAAMC,OAAO,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACN,YAAY,CAACO,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAACR,IAAI,CAACY,IAAI,CAAMR,GAAG,EAAEO,IAAI,EAAE;MAACL;IAAO,CAAC,CAAC;EAClD;EAEAO,qBAAqB;IACnB,MAAMT,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,aAAa;IACxC,MAAMC,OAAO,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACN,YAAY,CAACO,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAML,GAAG,EAAE;MAACE;IAAO,CAAC,CAAC;EAC3C;EAEAQ,UAAU,CAACC,SAAc;IACvB,MAAMX,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,aAAa;IACxC,MAAMC,OAAO,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACN,YAAY,CAACO,QAAQ,EAAE,CAAC;IAChG,OAAO,IAAI,CAACR,IAAI,CAACY,IAAI,CAAMR,GAAG,EAAEW,SAAS,EAAE;MAACT;IAAO,CAAC,CAAC;EACvD;EAAC;qBA7BUR,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAkB,SAAZlB,YAAY;IAAAmB,YAFX;EAAM","names":["HttpHeaders","AdminService","constructor","http","loginService","getAdmin","userId","url","baseUrl","headers","set","getToken","get","addSpecialization","spec","post","getAllSpecializations","saveDoctor","doctorDto","factory","providedIn"],"sourceRoot":"","sources":["C:\\HealthCareSystem\\Frontend\\src\\app\\service\\admin.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LoginService } from './login.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n\r\n  private baseUrl = 'https://healthcare-backend-jsrk.onrender.com/admin'; // Spring Boot URL\r\n\r\n\r\n  constructor(private http: HttpClient, private loginService : LoginService) { }\r\n\r\n  getAdmin(userId:any): Observable<any> {\r\n    const url = `${this.baseUrl}/getAdmin/${userId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, {headers});\r\n  }\r\n\r\n  addSpecialization(spec: any): Observable<any> {\r\n    const url = `${this.baseUrl}/addSpec`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.post<any>(url, spec, {headers});\r\n  }\r\n\r\n  getAllSpecializations(): Observable<any> {\r\n    const url = `${this.baseUrl}/getAllSpec`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, {headers});\r\n  }\r\n\r\n  saveDoctor(doctorDto: any): Observable<any> {\r\n    const url = `${this.baseUrl}/saveDoctor`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.post<any>(url, doctorDto, {headers});\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}