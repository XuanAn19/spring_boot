{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nlet DoctorAppointmentsComponent = class DoctorAppointmentsComponent {\n  constructor(appointmentService) {\n    this.appointmentService = appointmentService;\n    this.appointments = [];\n    this.doctorId = 0;\n    this.displayedColumns = ['userName', 'userEmail', 'appointmentDate', 'appointmentTime', 'bookingDate', 'reason', 'status'];\n    this.dataSource = new MatTableDataSource();\n  }\n  ngOnInit() {\n    // To set user_id\n    let userStr = localStorage.getItem('user');\n    if (userStr) {\n      let user = JSON.parse(userStr);\n      this.doctorId = user.userId;\n    } else {\n      console.error('Dữ liệu người dùng không tìm thấy trong localStorage.');\n    }\n    this.getAppointments();\n  }\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n  }\n  getAppointments() {\n    this.appointmentService.getAppointmentsByDoctorId(this.doctorId).subscribe(data => {\n      this.appointments = data;\n      this.dataSource.data = this.appointments;\n    }, error => {\n      console.error(error);\n    });\n  }\n  updateStatus(appointmentId, status) {\n    this.appointmentService.updateStatus(appointmentId, status).subscribe(data => {\n      console.log('Cập nhật tình trạng cuộc hẹn:', data);\n      window.location.reload();\n      alert(\"Trạng thái đã được cập nhật.\");\n      // Perform any additional actions upon success\n    }, error => {\n      console.error('Lỗi cập nhật cuộc hẹn:', error);\n      alert(\"Lỗi cập nhật cuộc hẹn\");\n      // Handle error scenarios\n    });\n  }\n};\n\n__decorate([ViewChild(MatPaginator)], DoctorAppointmentsComponent.prototype, \"paginator\", void 0);\nDoctorAppointmentsComponent = __decorate([Component({\n  selector: 'app-doctor-appointments',\n  templateUrl: './doctor-appointments.component.html',\n  styleUrls: ['./doctor-appointments.component.css']\n})], DoctorAppointmentsComponent);\nexport { DoctorAppointmentsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAUC,SAAS,QAAQ,eAAe;AAC5D,SAASC,kBAAkB,QAAQ,yBAAyB;AAG5D,SAASC,YAAY,QAAQ,6BAA6B;AAQnD,IAAMC,2BAA2B,GAAjC,MAAMA,2BAA2B;EAOtCC,YAAoBC,kBAAsC;IAAtC,uBAAkB,GAAlBA,kBAAkB;IALtC,iBAAY,GAAkB,EAAE;IAChC,aAAQ,GAAG,CAAC;IACZ,qBAAgB,GAAa,CAAC,UAAU,EAAE,WAAW,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,aAAa,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAC/H,eAAU,GAAG,IAAIJ,kBAAkB,EAAe;EAEY;EAI9DK,QAAQ;IACP;IACA,IAAIC,OAAO,GAAQC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,OAAO,EAAE;MACX,IAAIG,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,OAAO,CAAC;MAC9B,IAAI,CAACM,QAAQ,GAAGH,IAAI,CAACI,MAAM;KAC5B,MAAM;MACLC,OAAO,CAACC,KAAK,CAAC,uDAAuD,CAAC;;IAExE,IAAI,CAACC,eAAe,EAAE;EACvB;EACAC,eAAe;IACb,IAAI,CAACC,UAAU,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS;EAC5C;EACAH,eAAe;IACb,IAAI,CAACZ,kBAAkB,CAACgB,yBAAyB,CAAC,IAAI,CAACR,QAAQ,CAAC,CAACS,SAAS,CACvEC,IAAmB,IAAI;MACtB,IAAI,CAACC,YAAY,GAAGD,IAAI;MACxB,IAAI,CAACJ,UAAU,CAACI,IAAI,GAAG,IAAI,CAACC,YAAY;IAC1C,CAAC,EACAR,KAAK,IAAI;MACRD,OAAO,CAACC,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;EAIAS,YAAY,CAACC,aAAiB,EAAEC,MAAW;IACzC,IAAI,CAACtB,kBAAkB,CAACoB,YAAY,CAACC,aAAa,EAAEC,MAAM,CAAC,CAACL,SAAS,CAClEC,IAAI,IAAI;MACPR,OAAO,CAACa,GAAG,CAAC,+BAA+B,EAAEL,IAAI,CAAC;MAElDM,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;MACxBC,KAAK,CAAC,8BAA8B,CAAC;MACrC;IACF,CAAC,EACAhB,KAAK,IAAI;MACRD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CgB,KAAK,CAAC,uBAAuB,CAAC;MAC9B;IACF,CAAC,CACF;EACH;CAID;;AAjDyBC,YAAxBjC,SAAS,CAACE,YAAY,CAAC,8DAA0B;AATtCC,2BAA2B,eALvCJ,SAAS,CAAC;EACTmC,QAAQ,EAAE,yBAAyB;EACnCC,WAAW,EAAE,sCAAsC;EACnDC,SAAS,EAAE,CAAC,qCAAqC;CAClD,CAAC,GACWjC,2BAA2B,CA0DvC;SA1DYA,2BAA2B","names":["Component","ViewChild","MatTableDataSource","MatPaginator","DoctorAppointmentsComponent","constructor","appointmentService","ngOnInit","userStr","localStorage","getItem","user","JSON","parse","doctorId","userId","console","error","getAppointments","ngAfterViewInit","dataSource","paginator","getAppointmentsByDoctorId","subscribe","data","appointments","updateStatus","appointmentId","status","log","window","location","reload","alert","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\voket\\Desktop\\Moduel2\\HealthCareSystem\\Frontend1\\Frontend\\src\\app\\components\\doctor\\doctor-appointments\\doctor-appointments.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { AppointmentService } from 'src/app/service/appointment.service';\r\nimport { Appointment } from '../../models/appointment.model';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\n\r\n\r\n@Component({\r\n  selector: 'app-doctor-appointments',\r\n  templateUrl: './doctor-appointments.component.html',\r\n  styleUrls: ['./doctor-appointments.component.css']\r\n})\r\nexport class DoctorAppointmentsComponent {\r\n\r\n  appointments: Appointment[] = [];\r\n  doctorId = 0;\r\n  displayedColumns: string[] = ['userName', 'userEmail', 'appointmentDate', 'appointmentTime', 'bookingDate', 'reason', 'status'];\r\n  dataSource = new MatTableDataSource<Appointment>();\r\n\r\n  constructor(private appointmentService: AppointmentService) { }\r\n\r\n @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n\r\n  ngOnInit(): void {\r\n   // To set user_id\r\n   let userStr: any = localStorage.getItem('user');\r\n   if (userStr) {\r\n     let user = JSON.parse(userStr);\r\n     this.doctorId = user.userId;\r\n   } else {\r\n     console.error('Dữ liệu người dùng không tìm thấy trong localStorage.');\r\n   }\r\n   this.getAppointments();\r\n  }\r\n  ngAfterViewInit() {\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n  getAppointments(): void {\r\n    this.appointmentService.getAppointmentsByDoctorId(this.doctorId).subscribe(\r\n      (data: Appointment[]) => {\r\n        this.appointments = data;\r\n        this.dataSource.data = this.appointments;\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }\r\n  \r\n  \r\n\r\n  updateStatus(appointmentId:any, status: any): void {\r\n    this.appointmentService.updateStatus(appointmentId, status).subscribe(\r\n      (data) => {\r\n        console.log('Cập nhật tình trạng cuộc hẹn:', data);\r\n        \r\n        window.location.reload();\r\n        alert(\"Trạng thái đã được cập nhật.\")\r\n        // Perform any additional actions upon success\r\n      },\r\n      (error) => {\r\n        console.error('Lỗi cập nhật cuộc hẹn:', error);\r\n        alert(\"Lỗi cập nhật cuộc hẹn\");\r\n        // Handle error scenarios\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}