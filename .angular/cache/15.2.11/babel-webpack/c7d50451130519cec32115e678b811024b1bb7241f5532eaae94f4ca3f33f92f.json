{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n    this.loginStatusSubject = new Subject();\n    this.baseUrl = 'https://healthcare-backend-jsrk.onrender.com'; // Spring Boot URL\n  }\n\n  generateToken(userRequest) {\n    return this.http.post(`${this.baseUrl}/generate-token`, userRequest);\n  }\n  getLoggedInUser() {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.getToken());\n    return this.http.get(`${this.baseUrl}/current-user`, {\n      headers\n    });\n  }\n  userLogin(token) {\n    localStorage.setItem(\"token\", token);\n    return true;\n  }\n  isLoggenIn() {\n    let token = localStorage.getItem(\"token\");\n    return !!token; // Simplified check for token presence\n  }\n\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    return true;\n  }\n  getToken() {\n    return localStorage.getItem(\"token\") || '';\n  }\n  setUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  getUser() {\n    let user = localStorage.getItem(\"user\");\n    return user ? JSON.parse(user) : null;\n  }\n  getUserRole() {\n    let user = this.getUser();\n    return user ? user.role : null; // Assuming user object has a 'role' property\n  }\n  static #_ = this.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,OAAO,QAAQ,MAAM;;;AAK9B,OAAM,MAAOC,YAAY;EAMvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJjB,uBAAkB,GAAG,IAAIH,OAAO,EAAW;IAE1C,YAAO,GAAG,8CAA8C,CAAC,CAAC;EAE1B;;EAEjCI,aAAa,CAACC,WAAgB;IACnC,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,iBAAiB,EAAEF,WAAW,CAAC;EACtE;EAEOG,eAAe;IACpB,MAAMC,OAAO,GAAG,IAAIV,WAAW,EAAE,CAACW,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,IAAI,CAACC,QAAQ,EAAE,CAAC;IACnF,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACL,OAAO,eAAe,EAAE;MAAEE;IAAO,CAAE,CAAC;EACnE;EAEOI,SAAS,CAACC,KAAU;IACzBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;IACpC,OAAO,IAAI;EACb;EAEOG,UAAU;IACf,IAAIH,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;IACzC,OAAO,CAAC,CAACJ,KAAK,CAAC,CAAC;EAClB;;EAEOK,MAAM;IACXJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;IAChCL,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;IAC/B,OAAO,IAAI;EACb;EAEOT,QAAQ;IACb,OAAOI,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAC5C;EAEOG,OAAO,CAACC,IAAS;IACtBP,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEO,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;EACpD;EAEOG,OAAO;IACZ,IAAIH,IAAI,GAAGP,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;IACvC,OAAOI,IAAI,GAAGC,IAAI,CAACG,KAAK,CAACJ,IAAI,CAAC,GAAG,IAAI;EACvC;EAEOK,WAAW;IAChB,IAAIL,IAAI,GAAG,IAAI,CAACG,OAAO,EAAE;IACzB,OAAOH,IAAI,GAAGA,IAAI,CAACM,IAAI,GAAG,IAAI,CAAC,CAAC;EAClC;EAAC;qBAjDU3B,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAA4B,SAAZ5B,YAAY;IAAA6B,YAFX;EAAM","names":["HttpHeaders","Subject","LoginService","constructor","http","generateToken","userRequest","post","baseUrl","getLoggedInUser","headers","set","getToken","get","userLogin","token","localStorage","setItem","isLoggenIn","getItem","logout","removeItem","setUser","user","JSON","stringify","getUser","parse","getUserRole","role","factory","providedIn"],"sourceRoot":"","sources":["C:\\HealthCareSystem\\Frontend\\src\\app\\service\\login.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n\r\n  public loginStatusSubject = new Subject<boolean>();\r\n\r\n  private baseUrl = 'https://healthcare-backend-jsrk.onrender.com'; // Spring Boot URL\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public generateToken(userRequest: any) {\r\n    return this.http.post(`${this.baseUrl}/generate-token`, userRequest);\r\n  }\r\n\r\n  public getLoggedInUser() {\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.getToken());\r\n    return this.http.get(`${this.baseUrl}/current-user`, { headers });\r\n  }\r\n\r\n  public userLogin(token: any) {\r\n    localStorage.setItem(\"token\", token);\r\n    return true;\r\n  }\r\n\r\n  public isLoggenIn() {\r\n    let token = localStorage.getItem(\"token\");\r\n    return !!token; // Simplified check for token presence\r\n  }\r\n\r\n  public logout() {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"user\");\r\n    return true;\r\n  }\r\n\r\n  public getToken() {\r\n    return localStorage.getItem(\"token\") || '';\r\n  }\r\n\r\n  public setUser(user: any) {\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n  }\r\n\r\n  public getUser() {\r\n    let user = localStorage.getItem(\"user\");\r\n    return user ? JSON.parse(user) : null;\r\n  }\r\n\r\n  public getUserRole() {\r\n    let user = this.getUser();\r\n    return user ? user.role : null; // Assuming user object has a 'role' property\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}