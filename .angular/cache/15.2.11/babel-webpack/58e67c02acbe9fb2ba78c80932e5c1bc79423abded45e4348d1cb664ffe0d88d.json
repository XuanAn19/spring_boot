{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nlet TreatmentListComponent = class TreatmentListComponent {\n  constructor(appointmentService, treatmentService) {\n    this.appointmentService = appointmentService;\n    this.treatmentService = treatmentService;\n    this.appointments = [];\n    this.appointment = [];\n    this.doctorId = 0;\n    this.treatmentHistory = [];\n    this.displayedColumns = ['userName', 'userEmail', 'appointmentDate', 'appointmentTime', 'bookingDate', 'reason', 'status', 'action'];\n    this.dataSource = new MatTableDataSource();\n    this.selectedAppointment = null;\n    this.treatment = {\n      treatmentId: 0,\n      diagnosis: '',\n      treatmentMethod: '',\n      notes: '',\n      result: '',\n      filePath: '',\n      treatmentDate: new Date(),\n      appointmentId: 0,\n      userId: 0\n    };\n    // Biến cờ để hiển thị/ẩn form và lịch sử\n    this.showTreatmentForm = false;\n    this.showTreatmentHistory = false;\n    this.isEditMode = false;\n  }\n  ngOnInit() {\n    const userStr = localStorage.getItem('user');\n    if (userStr) {\n      const user = JSON.parse(userStr);\n      this.doctorId = user.userId;\n    } else {\n      console.error('Không tìm thấy dữ liệu người dùng trong localStorage.');\n    }\n    this.getAppointments();\n  }\n  getAppointments() {\n    this.appointmentService.getAppointmentsByDoctorId(this.doctorId).subscribe(data => {\n      this.appointments = data;\n      this.dataSource.data = this.appointments;\n      console.log(data);\n    }, error => {\n      console.error('Lỗi khi lấy danh sách lịch hẹn:', error);\n    });\n  }\n  // Mở form thêm/cập nhật điều trị\n  openTreatmentForm(appointment) {\n    this.treatmentService.getUserIdByEmail(appointment.user.user.email).subscribe(userId => {\n      this.treatment = {\n        treatmentId: 0,\n        diagnosis: '',\n        treatmentMethod: '',\n        notes: '',\n        result: '',\n        filePath: '',\n        treatmentDate: new Date(),\n        appointmentId: appointment.appointmentId,\n        userId: userId\n      };\n      this.showTreatmentForm = true;\n      this.isEditMode = false;\n      this.showTreatmentHistory = false; // Ẩn lịch sử nếu đang hiển thị\n    }, error => {\n      console.error('Lỗi khi lấy User ID:', error);\n      alert('Lỗi khi lấy User ID.');\n    });\n  }\n  // Mở lịch sử điều trị\n  viewTreatmentHistory(userId) {\n    this.treatmentService.getTreatmentsByUserId(userId).subscribe(treatments => {\n      if (treatments.length > 0) {\n        this.treatmentHistory = treatments;\n        this.showTreatmentHistory = true;\n        this.showTreatmentForm = false; // Ẩn form nếu đang hiển thị\n      } else {\n        alert('Không có lịch sử điều trị nào cho người dùng này.');\n      }\n    }, error => {\n      console.error('Lỗi khi lấy lịch sử điều trị:', error);\n    });\n  }\n  // Lưu thông tin điều trị\n  saveTreatment() {\n    if (!this.treatment.treatmentDate) {\n      this.treatment.treatmentDate = new Date();\n    }\n    console.log(this.treatment.treatmentDate);\n    if (this.isEditMode) {\n      this.treatmentService.updateTreatment(this.treatment.treatmentId, this.treatment).subscribe(data => {\n        alert('Cập nhật điều trị thành công!');\n        this.resetForm();\n        this.getAppointments(); // Refresh danh sách\n      }, error => {\n        console.error('Lỗi khi cập nhật điều trị:', error);\n        alert('Lỗi khi cập nhật điều trị.');\n      });\n    } else {\n      this.treatmentService.addTreatment(this.treatment).subscribe(data => {\n        console.log('Dữ liệu thêm điều trị:', data);\n        alert('Thêm điều trị thành công!');\n        this.resetForm();\n        this.getAppointments(); // Refresh danh sách\n      }, error => {\n        console.error('Lỗi khi thêm điều trị:', error);\n        alert('Lỗi khi thêm điều trị.');\n      });\n    }\n  }\n  // Xóa điều trị\n  deleteTreatment(treatmentId) {\n    if (confirm('Bạn có chắc chắn muốn xóa điều trị này?')) {\n      this.treatmentService.deleteTreatment(treatmentId).subscribe(data => {\n        alert('Xóa điều trị thành công!');\n        this.getAppointments(); // Refresh danh sách\n      }, error => {\n        console.error('Lỗi khi xóa điều trị:', error);\n        alert('Lỗi khi xóa điều trị.');\n      });\n    }\n  }\n  // Đóng form và reset dữ liệu\n  resetForm() {\n    this.showTreatmentForm = false;\n    this.showTreatmentHistory = false;\n    this.isEditMode = false;\n    this.treatment = {\n      treatmentId: 0,\n      diagnosis: '',\n      treatmentMethod: '',\n      notes: '',\n      result: '',\n      filePath: '',\n      treatmentDate: new Date(),\n      appointmentId: 0,\n      userId: 0\n    };\n  }\n};\nTreatmentListComponent = __decorate([Component({\n  selector: 'app-treatment-list',\n  templateUrl: './treatment-list.component.html',\n  styleUrls: ['./treatment-list.component.css']\n})], TreatmentListComponent);\nexport { TreatmentListComponent };","map":{"version":3,"mappings":"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","names":["Component","MatTableDataSource","TreatmentListComponent","constructor","appointmentService","treatmentService","treatmentId","diagnosis","treatmentMethod","notes","result","filePath","treatmentDate","Date","appointmentId","userId","ngOnInit","userStr","localStorage","getItem","user","JSON","parse","doctorId","console","error","getAppointments","getAppointmentsByDoctorId","subscribe","data","appointments","dataSource","log","openTreatmentForm","appointment","getUserIdByEmail","email","treatment","showTreatmentForm","isEditMode","showTreatmentHistory","alert","viewTreatmentHistory","getTreatmentsByUserId","treatments","length","treatmentHistory","saveTreatment","updateTreatment","resetForm","addTreatment","deleteTreatment","confirm","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\voket\\Desktop\\Moduel2\\HealthCareSystem\\Frontend1\\Frontend\\src\\app\\treatment-list\\treatment-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Appointment, Appointments } from '../components/models/appointment.model';\nimport { Treatment } from '../components/models/treatment.model';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AppointmentService } from '../service/appointment.service';\nimport { TreatmentService } from '../treatment.service';\n\n@Component({\n  selector: 'app-treatment-list',\n  templateUrl: './treatment-list.component.html',\n  styleUrls: ['./treatment-list.component.css']\n})\nexport class TreatmentListComponent implements OnInit {\n    appointments: Appointment[] = [];\n    appointment: Appointments[] = [];\n    doctorId = 0;\n    treatmentHistory: Treatment[] = [];\n    displayedColumns: string[] = [\n      'userName',\n      'userEmail',\n      'appointmentDate',\n      'appointmentTime',\n      'bookingDate',\n      'reason',\n      'status',\n      'action',\n    ];\n  \n    dataSource = new MatTableDataSource<Appointment>();\n  \n    selectedAppointment: Appointment | null = null;\n    treatment: Treatment = {\n      treatmentId: 0,\n      diagnosis: '',\n      treatmentMethod: '',\n      notes: '',\n      result: '',\n      filePath: '',\n      treatmentDate: new Date(),\n      appointmentId: 0,\n      userId: 0,\n    };\n  \n    // Biến cờ để hiển thị/ẩn form và lịch sử\n    showTreatmentForm: boolean = false;\n    showTreatmentHistory: boolean = false;\n    isEditMode: boolean = false;\n  \n    constructor(\n      private appointmentService: AppointmentService,\n      private treatmentService: TreatmentService\n    ) {}\n  \n    ngOnInit(): void {\n      const userStr = localStorage.getItem('user');\n      if (userStr) {\n        const user = JSON.parse(userStr);\n        this.doctorId = user.userId;\n      } else {\n        console.error('Không tìm thấy dữ liệu người dùng trong localStorage.');\n      }\n      this.getAppointments();\n    }\n  \n    getAppointments(): void {\n      this.appointmentService.getAppointmentsByDoctorId(this.doctorId).subscribe(\n        (data: Appointments[]) => {\n          this.appointments = data;\n          this.dataSource.data = this.appointments;\n          console.log(data);\n        },\n        (error) => {\n          console.error('Lỗi khi lấy danh sách lịch hẹn:', error);\n        }\n      );\n    }\n  \n    // Mở form thêm/cập nhật điều trị\n    openTreatmentForm(appointment: Appointments): void {\n      this.treatmentService.getUserIdByEmail(appointment.user.user.email).subscribe(\n        (userId: number) => {\n          this.treatment = {\n            treatmentId: 0,\n            diagnosis: '',\n            treatmentMethod: '',\n            notes: '',\n            result: '',\n            filePath: '',\n            treatmentDate: new Date(),\n            appointmentId: appointment.appointmentId,\n            userId: userId,\n          };\n          this.showTreatmentForm = true;\n          this.isEditMode = false;\n          this.showTreatmentHistory = false; // Ẩn lịch sử nếu đang hiển thị\n        },\n        (error) => {\n          console.error('Lỗi khi lấy User ID:', error);\n          alert('Lỗi khi lấy User ID.');\n        }\n      );\n    }\n  \n    // Mở lịch sử điều trị\n    viewTreatmentHistory(userId: number): void {\n      this.treatmentService.getTreatmentsByUserId(userId).subscribe(\n        (treatments) => {\n          if (treatments.length > 0) {\n            this.treatmentHistory = treatments;\n            this.showTreatmentHistory = true;\n            this.showTreatmentForm = false; // Ẩn form nếu đang hiển thị\n          } else {\n            alert('Không có lịch sử điều trị nào cho người dùng này.');\n          }\n        },\n        (error) => {\n          console.error('Lỗi khi lấy lịch sử điều trị:', error);\n        }\n      );\n    }\n  \n    // Lưu thông tin điều trị\n    saveTreatment(): void {\n      if (!this.treatment.treatmentDate) {\n        this.treatment.treatmentDate = new Date();\n      }\n      console.log(this.treatment.treatmentDate);\n      if (this.isEditMode) {\n        this.treatmentService.updateTreatment(this.treatment.treatmentId, this.treatment).subscribe(\n          (data) => {\n            alert('Cập nhật điều trị thành công!');\n            this.resetForm();\n            this.getAppointments(); // Refresh danh sách\n          },\n          (error) => {\n            console.error('Lỗi khi cập nhật điều trị:', error);\n            alert('Lỗi khi cập nhật điều trị.');\n          }\n        );\n      } else {\n        this.treatmentService.addTreatment(this.treatment).subscribe(\n          (data) => {\n            console.log('Dữ liệu thêm điều trị:', data);\n            alert('Thêm điều trị thành công!');\n            this.resetForm();\n            this.getAppointments(); // Refresh danh sách\n          },\n          (error) => {\n            console.error('Lỗi khi thêm điều trị:', error);\n            alert('Lỗi khi thêm điều trị.');\n          }\n        );\n      }\n    }\n  \n    // Xóa điều trị\n    deleteTreatment(treatmentId: number): void {\n      if (confirm('Bạn có chắc chắn muốn xóa điều trị này?')) {\n        this.treatmentService.deleteTreatment(treatmentId).subscribe(\n          (data) => {\n            alert('Xóa điều trị thành công!');\n            this.getAppointments(); // Refresh danh sách\n          },\n          (error) => {\n            console.error('Lỗi khi xóa điều trị:', error);\n            alert('Lỗi khi xóa điều trị.');\n          }\n        );\n      }\n    }\n  \n    // Đóng form và reset dữ liệu\n    resetForm(): void {\n      this.showTreatmentForm = false;\n      this.showTreatmentHistory = false;\n      this.isEditMode = false;\n      this.treatment = {\n        treatmentId: 0,\n        diagnosis: '',\n        treatmentMethod: '',\n        notes: '',\n        result: '',\n        filePath: '',\n        treatmentDate: new Date(),\n        appointmentId: 0,\n        userId: 0,\n      };\n    }\n  }\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}