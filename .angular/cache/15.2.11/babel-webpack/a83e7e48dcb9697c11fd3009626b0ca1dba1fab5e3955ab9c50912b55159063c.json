{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AddUserComponent = class AddUserComponent {\n  constructor(admin) {\n    this.admin = admin;\n    this.users = [];\n    this.selectedUser = null;\n    this.newUser = {};\n  }\n  ngOnInit() {\n    this.fetchUsers();\n  }\n  fetchUsers() {\n    this.admin.getAllUsers().subscribe(data => {\n      this.users = data;\n    }, error => {\n      console.error('Error fetching users:', error);\n    });\n  }\n  createUser() {\n    this.admin.createNormalUser(this.newUser).subscribe(response => {\n      console.log('User created successfully:', response);\n      this.fetchUsers(); // Reload users after creating a new user\n      this.resetForm(); // Reset the form fields\n    }, error => {\n      console.error('Error creating user:', error);\n    });\n  }\n  resetForm() {\n    this.newUser = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      role: 'NORMAL'\n    }; // Reset form values\n  }\n  // Update user\n  updateUser() {\n    if (this.selectedUser) {\n      this.admin.updateUser(this.selectedUser.email, this.selectedUser).subscribe(response => {\n        this.fetchUsers(); // Refresh the list after updating\n        alert('User updated successfully!');\n      }, error => {\n        console.error('Error updating user:', error);\n      });\n    }\n  }\n  // Delete user\n  deleteUser(userId) {\n    this.admin.deleteNormalUser(userId).subscribe(response => {\n      this.fetchUsers(); // Refresh the list after deletion\n      alert('User deleted successfully!');\n    }, error => {\n      console.error('Error deleting user:', error);\n    });\n  }\n  // Select user for editing\n  selectUser(user) {\n    this.selectedUser = {\n      ...user\n    }; // Clone to prevent direct modification\n  }\n  // Reset selection\n  resetSelection() {\n    this.selectedUser = null;\n  }\n};\nAddUserComponent = __decorate([Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['./add-user.component.css']\n})], AddUserComponent);\nexport { AddUserComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAO1C,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAM3BC,YAAoBC,KAAmB;IAAnB,UAAK,GAALA,KAAK;IALzB,UAAK,GAAU,EAAE;IACjB,iBAAY,GAAQ,IAAI;IACxB,YAAO,GAAQ,EAAE;EAGyB;EAE1CC,QAAQ;IACN,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAA,UAAU;IACR,IAAI,CAACF,KAAK,CAACG,WAAW,EAAE,CAACC,SAAS,CAC/BC,IAAI,IAAI;MACP,IAAI,CAACC,KAAK,GAAGD,IAAI;IACnB,CAAC,EACAE,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CACF;EACH;EAEAE,UAAU;IACR,IAAI,CAACT,KAAK,CAACU,gBAAgB,CAAC,IAAI,CAACC,OAAO,CAAC,CAACP,SAAS,CAChDQ,QAAQ,IAAI;MACXJ,OAAO,CAACK,GAAG,CAAC,4BAA4B,EAAED,QAAQ,CAAC;MACnD,IAAI,CAACV,UAAU,EAAE,CAAC,CAAC;MACnB,IAAI,CAACY,SAAS,EAAE,CAAC,CAAC;IACpB,CAAC,EACAP,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CACF;EACH;EAEAO,SAAS;IACP,IAAI,CAACH,OAAO,GAAG;MAAEI,SAAS,EAAE,EAAE;MAAEC,QAAQ,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAQ,CAAE,CAAC,CAAC;EAC3F;EAEA;EACAC,UAAU;IACR,IAAI,IAAI,CAACC,YAAY,EAAE;MACrB,IAAI,CAACrB,KAAK,CAACoB,UAAU,CAAC,IAAI,CAACC,YAAY,CAACJ,KAAK,EAAE,IAAI,CAACI,YAAY,CAAC,CAACjB,SAAS,CACxEQ,QAAQ,IAAI;QACX,IAAI,CAACV,UAAU,EAAE,CAAC,CAAC;QACnBoB,KAAK,CAAC,4BAA4B,CAAC;MACrC,CAAC,EACAf,KAAK,IAAI;QACRC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C,CAAC,CACF;;EAEL;EAEA;EACAgB,UAAU,CAACC,MAAc;IACvB,IAAI,CAACxB,KAAK,CAACyB,gBAAgB,CAACD,MAAM,CAAC,CAACpB,SAAS,CAC1CQ,QAAQ,IAAI;MACX,IAAI,CAACV,UAAU,EAAE,CAAC,CAAC;MACnBoB,KAAK,CAAC,4BAA4B,CAAC;IACrC,CAAC,EACAf,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CACF;EACH;EAEA;EACAmB,UAAU,CAACC,IAAS;IAClB,IAAI,CAACN,YAAY,GAAG;MAAE,GAAGM;IAAI,CAAE,CAAC,CAAC;EACnC;EAEA;EACAC,cAAc;IACZ,IAAI,CAACP,YAAY,GAAG,IAAI;EAC1B;CACD;AA7EYvB,gBAAgB,eAL5BD,SAAS,CAAC;EACTgC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWjC,gBAAgB,CA6E5B;SA7EYA,gBAAgB","names":["Component","AddUserComponent","constructor","admin","ngOnInit","fetchUsers","getAllUsers","subscribe","data","users","error","console","createUser","createNormalUser","newUser","response","log","resetForm","firstName","lastName","email","password","role","updateUser","selectedUser","alert","deleteUser","userId","deleteNormalUser","selectUser","user","resetSelection","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\voket\\Desktop\\Moduel2\\HealthCareSystem\\Frontend1\\Frontend\\src\\app\\components\\admin\\add-user\\add-user.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['./add-user.component.css']\n})\nexport class AddUserComponent  implements OnInit {\n  users: any[] = [];\n  selectedUser: any = null;\n  newUser: any = {};\n  \n\n  constructor(private admin: AdminService) {}\n\n  ngOnInit(): void {\n    this.fetchUsers();\n  }\n\n  fetchUsers(): void {\n    this.admin.getAllUsers().subscribe(\n      (data) => {\n        this.users = data;\n      },\n      (error) => {\n        console.error('Error fetching users:', error);\n      }\n    );\n  }\n\n  createUser(): void {\n    this.admin.createNormalUser(this.newUser).subscribe(\n      (response) => {\n        console.log('User created successfully:', response);\n        this.fetchUsers(); // Reload users after creating a new user\n        this.resetForm(); // Reset the form fields\n      },\n      (error) => {\n        console.error('Error creating user:', error);\n      }\n    );\n  }\n\n  resetForm(): void {\n    this.newUser = { firstName: '', lastName: '', email: '', password: '', role: 'NORMAL' }; // Reset form values\n  }\n\n  // Update user\n  updateUser(): void {\n    if (this.selectedUser) {\n      this.admin.updateUser(this.selectedUser.email, this.selectedUser).subscribe(\n        (response) => {\n          this.fetchUsers(); // Refresh the list after updating\n          alert('User updated successfully!');\n        },\n        (error) => {\n          console.error('Error updating user:', error);\n        }\n      );\n    }\n  }\n\n  // Delete user\n  deleteUser(userId: number): void {\n    this.admin.deleteNormalUser(userId).subscribe(\n      (response) => {\n        this.fetchUsers(); // Refresh the list after deletion\n        alert('User deleted successfully!');\n      },\n      (error) => {\n        console.error('Error deleting user:', error);\n      }\n    );\n  }\n\n  // Select user for editing\n  selectUser(user: any): void {\n    this.selectedUser = { ...user }; // Clone to prevent direct modification\n  }\n\n  // Reset selection\n  resetSelection(): void {\n    this.selectedUser = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}