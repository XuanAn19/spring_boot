{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./login.service\";\nexport class AdminService {\n  constructor(http, loginService) {\n    this.http = http;\n    this.loginService = loginService;\n    this.baseUrl = 'http://localhost:8181/'; // Spring Boot URL\n  }\n\n  getAdmin(userId) {\n    const url = `${this.baseUrl}admin/getAdmin/${userId}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(url, {\n      headers\n    });\n  }\n  addSpecialization(spec) {\n    const url = `${this.baseUrl}admin/addSpec`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.post(url, spec, {\n      headers\n    });\n  }\n  getAllSpecializations() {\n    const url = `${this.baseUrl}admin/getAllSpec`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(url, {\n      headers\n    });\n  }\n  deleteSpecialization(id) {\n    const url = `${this.baseUrl}admin/deleteSpec/${id}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.delete(url, {\n      headers\n    });\n  }\n  saveDoctor(doctorDto) {\n    const url = `${this.baseUrl}admin/saveDoctor`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.post(url, doctorDto, {\n      headers\n    });\n  }\n  // Update Admin\n  updateAdmin(adminId, adminDto) {\n    const url = `${this.baseUrl}admin/updateAdmin/${adminId}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.put(url, adminDto, {\n      headers\n    });\n  }\n  // Delete Admin\n  deleteAdmin(adminId) {\n    const url = `${this.baseUrl}admin/deleteAdmin/${adminId}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.delete(url, {\n      headers\n    });\n  }\n  getAllDoctors() {\n    const url = `${this.baseUrl}admin/getAllDoctors`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(url, {\n      headers\n    });\n  }\n  // Get doctor by ID\n  getDoctorById(doctorId) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(`${this.baseUrl}admin/doctors/${doctorId}`, {\n      headers\n    });\n  }\n  // Update Doctor\n  updateDoctor(doctorId, doctorDto) {\n    const url = `${this.baseUrl}admin/updateDoctor/${doctorId}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.put(url, doctorDto, {\n      headers\n    });\n  }\n  // Delete Doctor\n  deleteDoctor(doctorId) {\n    const url = `${this.baseUrl}admin/deleteDoctor/${doctorId}`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.delete(url, {\n      headers\n    });\n  }\n  // Create Normal User\n  createNormalUser(normalUserDto) {\n    const url = `${this.baseUrl}admin/create`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.post(url, normalUserDto, {\n      headers\n    });\n  }\n  // Xóa người dùng\n  deleteNormalUser(userId) {\n    const url = `${this.baseUrl}admin/user/delete/${userId}`; // Cập nhật URL API\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.delete(url, {\n      headers\n    });\n  }\n  // Get all users\n  getAllUsers() {\n    const url = `${this.baseUrl}admin/users`;\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(url, {\n      headers\n    });\n  }\n  getUserByEmail(email) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.get(`${this.baseUrl}/user/update/${email}`, {\n      headers\n    });\n  }\n  // Cập nhật thông tin người dùng\n  updateUser(email, user) {\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\n    return this.http.put(`${this.baseUrl}/user/update/${email}`, user, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function AdminService_Factory(t) {\n    return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LoginService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminService,\n    factory: AdminService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","AdminService","constructor","http","loginService","getAdmin","userId","url","baseUrl","headers","set","getToken","get","addSpecialization","spec","post","getAllSpecializations","deleteSpecialization","id","delete","saveDoctor","doctorDto","updateAdmin","adminId","adminDto","put","deleteAdmin","getAllDoctors","getDoctorById","doctorId","updateDoctor","deleteDoctor","createNormalUser","normalUserDto","deleteNormalUser","getAllUsers","getUserByEmail","email","updateUser","user","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\voket\\Desktop\\Moduel2\\HealthCareSystem\\Frontend1\\Frontend\\src\\app\\service\\admin.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LoginService } from './login.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminService {\r\n\r\n  private baseUrl = 'http://localhost:8181/'; // Spring Boot URL\r\n\r\n\r\n  constructor(private http: HttpClient, private loginService : LoginService) { }\r\n\r\n  getAdmin(userId:any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/getAdmin/${userId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, {headers});\r\n  }\r\n\r\n  addSpecialization(spec: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/addSpec`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.post<any>(url, spec, {headers});\r\n  }\r\n\r\n  getAllSpecializations(): Observable<any> {\r\n    const url = `${this.baseUrl}admin/getAllSpec`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, {headers});\r\n  }\r\n  deleteSpecialization(id: number): Observable<any> {\r\n    const url = `${this.baseUrl}admin/deleteSpec/${id}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.delete<any>(url, { headers });\r\n  }\r\n\r\n  saveDoctor(doctorDto: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/saveDoctor`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.post<any>(url, doctorDto, {headers});\r\n  }\r\n\r\n   // Update Admin\r\n   updateAdmin(adminId: any, adminDto: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/updateAdmin/${adminId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.put<any>(url, adminDto, { headers });\r\n  }\r\n\r\n  // Delete Admin\r\n  deleteAdmin(adminId: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/deleteAdmin/${adminId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.delete<any>(url, { headers });\r\n  }\r\n\r\n  getAllDoctors(): Observable<any> {\r\n    const url = `${this.baseUrl}admin/getAllDoctors`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, { headers });\r\n  }\r\n\r\n // Get doctor by ID\r\n getDoctorById(doctorId: number): Observable<any> {\r\n  const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n  return this.http.get<any>(`${this.baseUrl}admin/doctors/${doctorId}`, { headers });\r\n}\r\n  // Update Doctor\r\n  updateDoctor(doctorId: any, doctorDto: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/updateDoctor/${doctorId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.put<any>(url, doctorDto, { headers });\r\n  }\r\n\r\n  // Delete Doctor\r\n  deleteDoctor(doctorId: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/deleteDoctor/${doctorId}`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.delete<any>(url, { headers });\r\n  }\r\n\r\n  // Create Normal User\r\n  createNormalUser(normalUserDto: any): Observable<any> {\r\n    const url = `${this.baseUrl}admin/create`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.post<any>(url, normalUserDto, { headers });\r\n  }\r\n\r\n // Xóa người dùng\r\n deleteNormalUser(userId: number): Observable<any> {\r\n  const url = `${this.baseUrl}admin/user/delete/${userId}`; // Cập nhật URL API\r\n  const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n  return this.http.delete<any>(url, { headers });\r\n}\r\n// Get all users\r\ngetAllUsers(): Observable<any> {\r\n  const url = `${this.baseUrl}admin/users`;\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(url, { headers });\r\n}\r\n\r\n  getUserByEmail(email: string): Observable<any> {\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.get<any>(`${this.baseUrl}/user/update/${email}`, { headers });\r\n  }\r\n\r\n  // Cập nhật thông tin người dùng\r\n  updateUser(email: string, user: any): Observable<any> {\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + this.loginService.getToken());\r\n    return this.http.put<any>(`${this.baseUrl}/user/update/${email}`, user, { headers });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}